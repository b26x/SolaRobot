
07_Motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000006f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000067e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  00800100  00800100  000006f2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000724  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000764  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ef6  00000000  00000000  00000804  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007a6  00000000  00000000  000016fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000993  00000000  00000000  00001ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  00002834  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000679  00000000  00000000  000029f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000455  00000000  00000000  0000306d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  000034c2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 54 01 	jmp	0x2a8	; 0x2a8 <__vector_1>
   8:	0c 94 66 01 	jmp	0x2cc	; 0x2cc <__vector_2>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__vector_9>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 78 01 	jmp	0x2f0	; 0x2f0 <__vector_13>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 82 01 	jmp	0x304	; 0x304 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 32       	cpi	r26, 0x22	; 34
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 bb 01 	call	0x376	; 0x376 <main>
  88:	0c 94 3d 03 	jmp	0x67a	; 0x67a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <_Z4Initv>:
//Turn left on the spot
void Turn_left (unsigned char velocity) {
	PWMA = velocity; //Pulswidth modulation, MotorA
	PWMB = velocity; //MotorB
	PORTB &= ~(1 << PORTB1); //MotorA
	PORTB |=  (1 << PORTB0); //MotorB, PORTB 0bxxxxxx01
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	84 b9       	out	0x04, r24	; 4
  94:	17 b8       	out	0x07, r1	; 7
  96:	80 ef       	ldi	r24, 0xF0	; 240
  98:	8a b9       	out	0x0a, r24	; 10
  9a:	8a e0       	ldi	r24, 0x0A	; 10
  9c:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
  a0:	83 e0       	ldi	r24, 0x03	; 3
  a2:	8d bb       	out	0x1d, r24	; 29
  a4:	81 ea       	ldi	r24, 0xA1	; 161
  a6:	84 bd       	out	0x24, r24	; 36
  a8:	84 e0       	ldi	r24, 0x04	; 4
  aa:	85 bd       	out	0x25, r24	; 37
  ac:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
  b0:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
  b4:	92 e0       	ldi	r25, 0x02	; 2
  b6:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
  c0:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
  c4:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
  c8:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__DATA_REGION_ORIGIN__+0x10>
  cc:	81 e6       	ldi	r24, 0x61	; 97
  ce:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
  d2:	8d e8       	ldi	r24, 0x8D	; 141
  d4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
  d8:	08 95       	ret

000000da <_Z29Computing_Transmission_Valuesh>:
  da:	29 e2       	ldi	r18, 0x29	; 41
  dc:	82 9f       	mul	r24, r18
  de:	21 2d       	mov	r18, r1
  e0:	11 24       	eor	r1, r1
  e2:	22 95       	swap	r18
  e4:	2f 70       	andi	r18, 0x0F	; 15
  e6:	38 2f       	mov	r19, r24
  e8:	94 e6       	ldi	r25, 0x64	; 100
  ea:	29 9f       	mul	r18, r25
  ec:	30 19       	sub	r19, r0
  ee:	11 24       	eor	r1, r1
  f0:	9d ec       	ldi	r25, 0xCD	; 205
  f2:	39 9f       	mul	r19, r25
  f4:	31 2d       	mov	r19, r1
  f6:	11 24       	eor	r1, r1
  f8:	36 95       	lsr	r19
  fa:	36 95       	lsr	r19
  fc:	36 95       	lsr	r19
  fe:	89 9f       	mul	r24, r25
 100:	91 2d       	mov	r25, r1
 102:	11 24       	eor	r1, r1
 104:	96 95       	lsr	r25
 106:	96 95       	lsr	r25
 108:	96 95       	lsr	r25
 10a:	99 0f       	add	r25, r25
 10c:	49 2f       	mov	r20, r25
 10e:	44 0f       	add	r20, r20
 110:	44 0f       	add	r20, r20
 112:	94 0f       	add	r25, r20
 114:	89 1b       	sub	r24, r25
 116:	80 5d       	subi	r24, 0xD0	; 208
 118:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <Trans_data+0x2>
 11c:	21 11       	cpse	r18, r1
 11e:	0c c0       	rjmp	.+24     	; 0x138 <_Z29Computing_Transmission_Valuesh+0x5e>
 120:	80 e2       	ldi	r24, 0x20	; 32
 122:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <Trans_data>
 126:	31 11       	cpse	r19, r1
 128:	03 c0       	rjmp	.+6      	; 0x130 <_Z29Computing_Transmission_Valuesh+0x56>
 12a:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <Trans_data+0x1>
 12e:	08 95       	ret
 130:	30 5d       	subi	r19, 0xD0	; 208
 132:	30 93 20 01 	sts	0x0120, r19	; 0x800120 <Trans_data+0x1>
 136:	08 95       	ret
 138:	ef e1       	ldi	r30, 0x1F	; 31
 13a:	f1 e0       	ldi	r31, 0x01	; 1
 13c:	20 5d       	subi	r18, 0xD0	; 208
 13e:	20 83       	st	Z, r18
 140:	30 5d       	subi	r19, 0xD0	; 208
 142:	31 83       	std	Z+1, r19	; 0x01
 144:	08 95       	ret

00000146 <_Z14USART_Transmith>:
 146:	e0 ec       	ldi	r30, 0xC0	; 192
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	90 81       	ld	r25, Z
 14c:	95 ff       	sbrs	r25, 5
 14e:	fd cf       	rjmp	.-6      	; 0x14a <_Z14USART_Transmith+0x4>
 150:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 154:	08 95       	ret

00000156 <_Z10USART_Initj>:
 156:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 15a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 15e:	88 e1       	ldi	r24, 0x18	; 24
 160:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 164:	86 e0       	ldi	r24, 0x06	; 6
 166:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 16a:	08 95       	ret

0000016c <__vector_9>:
 16c:	1f 92       	push	r1
 16e:	0f 92       	push	r0
 170:	0f b6       	in	r0, 0x3f	; 63
 172:	0f 92       	push	r0
 174:	11 24       	eor	r1, r1
 176:	2f 93       	push	r18
 178:	3f 93       	push	r19
 17a:	4f 93       	push	r20
 17c:	5f 93       	push	r21
 17e:	6f 93       	push	r22
 180:	7f 93       	push	r23
 182:	8f 93       	push	r24
 184:	9f 93       	push	r25
 186:	af 93       	push	r26
 188:	bf 93       	push	r27
 18a:	ef 93       	push	r30
 18c:	ff 93       	push	r31
 18e:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <T2ck>
 192:	80 ff       	sbrs	r24, 0
 194:	0b c0       	rjmp	.+22     	; 0x1ac <__vector_9+0x40>
 196:	ea e7       	ldi	r30, 0x7A	; 122
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	80 81       	ld	r24, Z
 19c:	80 64       	ori	r24, 0x40	; 64
 19e:	80 83       	st	Z, r24
 1a0:	25 e1       	ldi	r18, 0x15	; 21
 1a2:	2a 95       	dec	r18
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <__vector_9+0x36>
 1a6:	00 00       	nop
 1a8:	2a 98       	cbi	0x05, 2	; 5
 1aa:	10 c0       	rjmp	.+32     	; 0x1cc <__vector_9+0x60>
 1ac:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <Channel>
 1b0:	8f 5f       	subi	r24, 0xFF	; 255
 1b2:	88 30       	cpi	r24, 0x08	; 8
 1b4:	19 f0       	breq	.+6      	; 0x1bc <__vector_9+0x50>
 1b6:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <Channel>
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <__vector_9+0x54>
 1bc:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <Channel>
 1c0:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <Channel>
 1c4:	80 66       	ori	r24, 0x60	; 96
 1c6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
 1ca:	2a 9a       	sbi	0x05, 2	; 5
 1cc:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <T2ck>
 1d0:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <T2ck+0x1>
 1d4:	01 96       	adiw	r24, 0x01	; 1
 1d6:	80 3d       	cpi	r24, 0xD0	; 208
 1d8:	27 e0       	ldi	r18, 0x07	; 7
 1da:	92 07       	cpc	r25, r18
 1dc:	29 f0       	breq	.+10     	; 0x1e8 <__vector_9+0x7c>
 1de:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <T2ck+0x1>
 1e2:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <T2ck>
 1e6:	04 c0       	rjmp	.+8      	; 0x1f0 <__vector_9+0x84>
 1e8:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <T2ck+0x1>
 1ec:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <T2ck>
 1f0:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <Counter_US>
 1f4:	8f 5f       	subi	r24, 0xFF	; 255
 1f6:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <Counter_US>
 1fa:	81 11       	cpse	r24, r1
 1fc:	15 c0       	rjmp	.+42     	; 0x228 <__vector_9+0xbc>
 1fe:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <timer>
 202:	88 23       	and	r24, r24
 204:	19 f0       	breq	.+6      	; 0x20c <__vector_9+0xa0>
 206:	8f 5f       	subi	r24, 0xFF	; 255
 208:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <timer>
 20c:	8b b1       	in	r24, 0x0b	; 11
 20e:	80 69       	ori	r24, 0x90	; 144
 210:	8b b9       	out	0x0b, r24	; 11
 212:	85 e3       	ldi	r24, 0x35	; 53
 214:	8a 95       	dec	r24
 216:	f1 f7       	brne	.-4      	; 0x214 <__vector_9+0xa8>
 218:	00 00       	nop
 21a:	8b b1       	in	r24, 0x0b	; 11
 21c:	8f 76       	andi	r24, 0x6F	; 111
 21e:	8b b9       	out	0x0b, r24	; 11
 220:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 224:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
 228:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <T2ck>
 22c:	80 ff       	sbrs	r24, 0
 22e:	2b c0       	rjmp	.+86     	; 0x286 <__vector_9+0x11a>
 230:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <Counter_Transmission>
 234:	8f 5f       	subi	r24, 0xFF	; 255
 236:	84 30       	cpi	r24, 0x04	; 4
 238:	19 f0       	breq	.+6      	; 0x240 <__vector_9+0xd4>
 23a:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <Counter_Transmission>
 23e:	15 c0       	rjmp	.+42     	; 0x26a <__vector_9+0xfe>
 240:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <Counter_Transmission>
 244:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <Counter_Transmission_Data>
 248:	8f 5f       	subi	r24, 0xFF	; 255
 24a:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <Counter_Transmission_Data>
 24e:	8a 30       	cpi	r24, 0x0A	; 10
 250:	21 f4       	brne	.+8      	; 0x25a <__vector_9+0xee>
 252:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <Counter_Transmission_Data>
 256:	0e 94 a3 00 	call	0x146	; 0x146 <_Z14USART_Transmith>
 25a:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <Counter_Transmission_Data>
 25e:	f0 e0       	ldi	r31, 0x00	; 0
 260:	e0 50       	subi	r30, 0x00	; 0
 262:	ff 4f       	sbci	r31, 0xFF	; 255
 264:	80 81       	ld	r24, Z
 266:	0e 94 6d 00 	call	0xda	; 0xda <_Z29Computing_Transmission_Valuesh>
 26a:	e0 91 1b 01 	lds	r30, 0x011B	; 0x80011b <Counter_Transmission>
 26e:	e3 30       	cpi	r30, 0x03	; 3
 270:	21 f4       	brne	.+8      	; 0x27a <__vector_9+0x10e>
 272:	89 e0       	ldi	r24, 0x09	; 9
 274:	0e 94 a3 00 	call	0x146	; 0x146 <_Z14USART_Transmith>
 278:	06 c0       	rjmp	.+12     	; 0x286 <__vector_9+0x11a>
 27a:	f0 e0       	ldi	r31, 0x00	; 0
 27c:	e1 5e       	subi	r30, 0xE1	; 225
 27e:	fe 4f       	sbci	r31, 0xFE	; 254
 280:	80 81       	ld	r24, Z
 282:	0e 94 a3 00 	call	0x146	; 0x146 <_Z14USART_Transmith>
 286:	ff 91       	pop	r31
 288:	ef 91       	pop	r30
 28a:	bf 91       	pop	r27
 28c:	af 91       	pop	r26
 28e:	9f 91       	pop	r25
 290:	8f 91       	pop	r24
 292:	7f 91       	pop	r23
 294:	6f 91       	pop	r22
 296:	5f 91       	pop	r21
 298:	4f 91       	pop	r20
 29a:	3f 91       	pop	r19
 29c:	2f 91       	pop	r18
 29e:	0f 90       	pop	r0
 2a0:	0f be       	out	0x3f, r0	; 63
 2a2:	0f 90       	pop	r0
 2a4:	1f 90       	pop	r1
 2a6:	18 95       	reti

000002a8 <__vector_1>:
 2a8:	1f 92       	push	r1
 2aa:	0f 92       	push	r0
 2ac:	0f b6       	in	r0, 0x3f	; 63
 2ae:	0f 92       	push	r0
 2b0:	11 24       	eor	r1, r1
 2b2:	8f 93       	push	r24
 2b4:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
 2b8:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 2bc:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <US_Time_L>
 2c0:	8f 91       	pop	r24
 2c2:	0f 90       	pop	r0
 2c4:	0f be       	out	0x3f, r0	; 63
 2c6:	0f 90       	pop	r0
 2c8:	1f 90       	pop	r1
 2ca:	18 95       	reti

000002cc <__vector_2>:
 2cc:	1f 92       	push	r1
 2ce:	0f 92       	push	r0
 2d0:	0f b6       	in	r0, 0x3f	; 63
 2d2:	0f 92       	push	r0
 2d4:	11 24       	eor	r1, r1
 2d6:	8f 93       	push	r24
 2d8:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
 2dc:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 2e0:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <US_Time_R>
 2e4:	8f 91       	pop	r24
 2e6:	0f 90       	pop	r0
 2e8:	0f be       	out	0x3f, r0	; 63
 2ea:	0f 90       	pop	r0
 2ec:	1f 90       	pop	r1
 2ee:	18 95       	reti

000002f0 <__vector_13>:
 2f0:	1f 92       	push	r1
 2f2:	0f 92       	push	r0
 2f4:	0f b6       	in	r0, 0x3f	; 63
 2f6:	0f 92       	push	r0
 2f8:	11 24       	eor	r1, r1
 2fa:	0f 90       	pop	r0
 2fc:	0f be       	out	0x3f, r0	; 63
 2fe:	0f 90       	pop	r0
 300:	1f 90       	pop	r1
 302:	18 95       	reti

00000304 <__vector_21>:
 304:	1f 92       	push	r1
 306:	0f 92       	push	r0
 308:	0f b6       	in	r0, 0x3f	; 63
 30a:	0f 92       	push	r0
 30c:	11 24       	eor	r1, r1
 30e:	8f 93       	push	r24
 310:	ef 93       	push	r30
 312:	ff 93       	push	r31
 314:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 318:	e0 91 19 01 	lds	r30, 0x0119	; 0x800119 <Channel>
 31c:	f0 e0       	ldi	r31, 0x00	; 0
 31e:	ef 5e       	subi	r30, 0xEF	; 239
 320:	fe 4f       	sbci	r31, 0xFE	; 254
 322:	80 83       	st	Z, r24
 324:	ff 91       	pop	r31
 326:	ef 91       	pop	r30
 328:	8f 91       	pop	r24
 32a:	0f 90       	pop	r0
 32c:	0f be       	out	0x3f, r0	; 63
 32e:	0f 90       	pop	r0
 330:	1f 90       	pop	r1
 332:	18 95       	reti

00000334 <_Z7Forwardhh>:
 334:	87 bd       	out	0x27, r24	; 39
 336:	68 bd       	out	0x28, r22	; 40
 338:	29 98       	cbi	0x05, 1	; 5
 33a:	28 98       	cbi	0x05, 0	; 5
 33c:	08 95       	ret

0000033e <_Z4Stopv>:
}

//Stop the motors
void Stop (void) {
	PWMA = 0; //Velocity = 0
 33e:	17 bc       	out	0x27, r1	; 39
	PWMB = 0; //Brake low (outputs shorted to ground)
 340:	18 bc       	out	0x28, r1	; 40
 342:	08 95       	ret

00000344 <_Z15Data_Visualizerv>:
	//Data[7] = Line_R3; //Line sensor right outside
	//Data[8] = US_Time_L; //Runtime of the US-signal, HI-part of TMR1-value
	//Data[9] = US_Time_R;
	//Data[8] = timer;
	//Data[8] = counter;
	Data[0] = Line_all_digit;
 344:	e0 e0       	ldi	r30, 0x00	; 0
 346:	f1 e0       	ldi	r31, 0x01	; 1
 348:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <Line_all_digit>
 34c:	80 83       	st	Z, r24
	Data[1] = linecounter;
 34e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <linecounter>
 352:	81 83       	std	Z+1, r24	; 0x01
	Data[3] = US_Time_L;
 354:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <US_Time_L>
 358:	83 83       	std	Z+3, r24	; 0x03
	Data[4] = US_Time_R;
 35a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <US_Time_R>
 35e:	84 83       	std	Z+4, r24	; 0x04
	Data[6] = Line_L3;
 360:	a1 e1       	ldi	r26, 0x11	; 17
 362:	b1 e0       	ldi	r27, 0x01	; 1
 364:	8c 91       	ld	r24, X
 366:	86 83       	std	Z+6, r24	; 0x06
	Data[7] = Line_R0;
 368:	14 96       	adiw	r26, 0x04	; 4
 36a:	8c 91       	ld	r24, X
 36c:	87 83       	std	Z+7, r24	; 0x07
	Data[9] = timer;
 36e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <timer>
 372:	81 87       	std	Z+9, r24	; 0x09
 374:	08 95       	ret

00000376 <main>:
void Data_Visualizer (void); //Define datas to be vizualized


//Main routine
int main(void) {
	Init(); //Initalize the MC
 376:	0e 94 48 00 	call	0x90	; 0x90 <_Z4Initv>
	USART_Init(MYUBRR); //Transmision/reception initialize
 37a:	8c e0       	ldi	r24, 0x0C	; 12
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	0e 94 ab 00 	call	0x156	; 0x156 <_Z10USART_Initj>
	sei(); //Enable all interrupts
 382:	78 94       	sei
	//cli(); //Clear all interrupts
	Stop();
 384:	0e 94 9f 01 	call	0x33e	; 0x33e <_Z4Stopv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 388:	2f ef       	ldi	r18, 0xFF	; 255
 38a:	83 ed       	ldi	r24, 0xD3	; 211
 38c:	90 e3       	ldi	r25, 0x30	; 48
 38e:	21 50       	subi	r18, 0x01	; 1
 390:	80 40       	sbci	r24, 0x00	; 0
 392:	90 40       	sbci	r25, 0x00	; 0
 394:	e1 f7       	brne	.-8      	; 0x38e <main+0x18>
 396:	00 c0       	rjmp	.+0      	; 0x398 <main+0x22>
 398:	00 00       	nop
	_delay_ms(1000);
	//char Motor_Left = 185; //Normal PWM parameter for...
	//char Motor_Right = 192; //...driving straight on
	Threshold = 100;	
 39a:	84 e6       	ldi	r24, 0x64	; 100
 39c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <Threshold>
	
	while (1) {
		Data_Visualizer(); //Define the values to be displayed
		
		Line_all_digit = 0b00000000; //set all line-values to 0
		linecounter = 8;
 3a0:	18 e0       	ldi	r17, 0x08	; 8
		if(Line_L3 < Threshold){
 3a2:	c1 e1       	ldi	r28, 0x11	; 17
 3a4:	d1 e0       	ldi	r29, 0x01	; 1
			 Line_all_digit |= 0b10000000;
 3a6:	68 94       	set
 3a8:	ff 24       	eor	r15, r15
 3aa:	f7 f8       	bld	r15, 7
			 linecounter--;
 3ac:	07 e0       	ldi	r16, 0x07	; 7
		}
		if(Line_R3 < Threshold){
			Line_all_digit |= 0b00000001;
			linecounter--;
		} //if right sensor sees white set right bit to 1
		if(linecounter == 8) all_black = true;
 3ae:	ee 24       	eor	r14, r14
 3b0:	e3 94       	inc	r14
					 if((Line_L1 - Line_R1) > 14) Forward((210+(45*(Line_R1/Line_L1))),255);
					 else Forward(255,255);
					 timer = 1;
				}
				else{
					 if((Line_R1 - Line_L1) > 14) Forward(255,(210+(45*(Line_L1/Line_R1))));
 3b2:	0f 2e       	mov	r0, r31
 3b4:	fd e2       	ldi	r31, 0x2D	; 45
 3b6:	df 2e       	mov	r13, r31
 3b8:	f0 2d       	mov	r31, r0
	//char Motor_Right = 192; //...driving straight on
	Threshold = 100;	
	
	
	while (1) {
		Data_Visualizer(); //Define the values to be displayed
 3ba:	0e 94 a2 01 	call	0x344	; 0x344 <_Z15Data_Visualizerv>
		
		Line_all_digit = 0b00000000; //set all line-values to 0
 3be:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <Line_all_digit>
		linecounter = 8;
 3c2:	10 93 0e 01 	sts	0x010E, r17	; 0x80010e <linecounter>
		if(Line_L3 < Threshold){
 3c6:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <Threshold>
 3ca:	98 81       	ld	r25, Y
 3cc:	98 17       	cp	r25, r24
 3ce:	20 f4       	brcc	.+8      	; 0x3d8 <main+0x62>
			 Line_all_digit |= 0b10000000;
 3d0:	f0 92 0f 01 	sts	0x010F, r15	; 0x80010f <Line_all_digit>
			 linecounter--;
 3d4:	00 93 0e 01 	sts	0x010E, r16	; 0x80010e <linecounter>
		} //if left sensor sees white set left bit to 1
		if(Line_L2 < Threshold){
 3d8:	99 81       	ldd	r25, Y+1	; 0x01
 3da:	98 17       	cp	r25, r24
 3dc:	50 f4       	brcc	.+20     	; 0x3f2 <main+0x7c>
			Line_all_digit |= 0b01000000;
 3de:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <Line_all_digit>
 3e2:	90 64       	ori	r25, 0x40	; 64
 3e4:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <Line_all_digit>
			linecounter--;
 3e8:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <linecounter>
 3ec:	91 50       	subi	r25, 0x01	; 1
 3ee:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <linecounter>
		}
		if(Line_L1 < Threshold){
 3f2:	6a 81       	ldd	r22, Y+2	; 0x02
 3f4:	68 17       	cp	r22, r24
 3f6:	50 f4       	brcc	.+20     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
			 Line_all_digit |= 0b00100000;
 3f8:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <Line_all_digit>
 3fc:	90 62       	ori	r25, 0x20	; 32
 3fe:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <Line_all_digit>
			 linecounter--;
 402:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <linecounter>
 406:	91 50       	subi	r25, 0x01	; 1
 408:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <linecounter>
		}
		if(Line_L0 < Threshold){ 
 40c:	9b 81       	ldd	r25, Y+3	; 0x03
 40e:	98 17       	cp	r25, r24
 410:	50 f4       	brcc	.+20     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
			Line_all_digit |= 0b00010000;
 412:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <Line_all_digit>
 416:	90 61       	ori	r25, 0x10	; 16
 418:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <Line_all_digit>
			linecounter--;
 41c:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <linecounter>
 420:	91 50       	subi	r25, 0x01	; 1
 422:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <linecounter>
		}
		if(Line_R0 < Threshold){
 426:	9c 81       	ldd	r25, Y+4	; 0x04
 428:	98 17       	cp	r25, r24
 42a:	50 f4       	brcc	.+20     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
			Line_all_digit |= 0b00001000;
 42c:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <Line_all_digit>
 430:	98 60       	ori	r25, 0x08	; 8
 432:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <Line_all_digit>
			linecounter--;
 436:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <linecounter>
 43a:	91 50       	subi	r25, 0x01	; 1
 43c:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <linecounter>
		}
		if(Line_R1 < Threshold){
 440:	9d 81       	ldd	r25, Y+5	; 0x05
 442:	98 17       	cp	r25, r24
 444:	50 f4       	brcc	.+20     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
			Line_all_digit |= 0b00000100;
 446:	20 91 0f 01 	lds	r18, 0x010F	; 0x80010f <Line_all_digit>
 44a:	24 60       	ori	r18, 0x04	; 4
 44c:	20 93 0f 01 	sts	0x010F, r18	; 0x80010f <Line_all_digit>
			linecounter--;
 450:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <linecounter>
 454:	21 50       	subi	r18, 0x01	; 1
 456:	20 93 0e 01 	sts	0x010E, r18	; 0x80010e <linecounter>
		}
		if(Line_R2 < Threshold){
 45a:	2e 81       	ldd	r18, Y+6	; 0x06
 45c:	28 17       	cp	r18, r24
 45e:	50 f4       	brcc	.+20     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
			Line_all_digit |= 0b00000010;
 460:	20 91 0f 01 	lds	r18, 0x010F	; 0x80010f <Line_all_digit>
 464:	22 60       	ori	r18, 0x02	; 2
 466:	20 93 0f 01 	sts	0x010F, r18	; 0x80010f <Line_all_digit>
			linecounter--;
 46a:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <linecounter>
 46e:	21 50       	subi	r18, 0x01	; 1
 470:	20 93 0e 01 	sts	0x010E, r18	; 0x80010e <linecounter>
		}
		if(Line_R3 < Threshold){
 474:	2f 81       	ldd	r18, Y+7	; 0x07
 476:	28 17       	cp	r18, r24
 478:	50 f4       	brcc	.+20     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
			Line_all_digit |= 0b00000001;
 47a:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <Line_all_digit>
 47e:	81 60       	ori	r24, 0x01	; 1
 480:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <Line_all_digit>
			linecounter--;
 484:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <linecounter>
 488:	81 50       	subi	r24, 0x01	; 1
 48a:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <linecounter>
		} //if right sensor sees white set right bit to 1
		if(linecounter == 8) all_black = true;
 48e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <linecounter>
 492:	88 30       	cpi	r24, 0x08	; 8
 494:	11 f4       	brne	.+4      	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
 496:	e0 92 0d 01 	sts	0x010D, r14	; 0x80010d <all_black>
		
		if(US_Time_L < 25 || US_Time_R < 25) Stop();  //|| US_Time_R < 22
 49a:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <US_Time_L>
 49e:	29 31       	cpi	r18, 0x19	; 25
 4a0:	20 f0       	brcs	.+8      	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
 4a2:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <US_Time_R>
 4a6:	29 31       	cpi	r18, 0x19	; 25
 4a8:	18 f4       	brcc	.+6      	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
 4aa:	0e 94 9f 01 	call	0x33e	; 0x33e <_Z4Stopv>
 4ae:	85 cf       	rjmp	.-246    	; 0x3ba <main+0x44>
		else{
			if((Line_all_digit & 0b11000011) == 0b11000011 && linecounter != 0){ //detect if lines only on inner sensors
 4b0:	20 91 0f 01 	lds	r18, 0x010F	; 0x80010f <Line_all_digit>
 4b4:	32 2f       	mov	r19, r18
 4b6:	33 7c       	andi	r19, 0xC3	; 195
 4b8:	33 3c       	cpi	r19, 0xC3	; 195
 4ba:	c1 f5       	brne	.+112    	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
 4bc:	88 23       	and	r24, r24
 4be:	09 f4       	brne	.+2      	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
 4c0:	af c0       	rjmp	.+350    	; 0x620 <__LOCK_REGION_LENGTH__+0x220>
				if(Line_L1 > Line_R1){
 4c2:	96 17       	cp	r25, r22
 4c4:	c8 f4       	brcc	.+50     	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
					 if((Line_L1 - Line_R1) > 14) Forward((210+(45*(Line_R1/Line_L1))),255);
 4c6:	26 2f       	mov	r18, r22
 4c8:	30 e0       	ldi	r19, 0x00	; 0
 4ca:	29 1b       	sub	r18, r25
 4cc:	31 09       	sbc	r19, r1
 4ce:	2f 30       	cpi	r18, 0x0F	; 15
 4d0:	31 05       	cpc	r19, r1
 4d2:	5c f0       	brlt	.+22     	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
 4d4:	89 2f       	mov	r24, r25
 4d6:	0e 94 31 03 	call	0x662	; 0x662 <__udivmodqi4>
 4da:	8d 9d       	mul	r24, r13
 4dc:	80 2d       	mov	r24, r0
 4de:	11 24       	eor	r1, r1
 4e0:	6f ef       	ldi	r22, 0xFF	; 255
 4e2:	8e 52       	subi	r24, 0x2E	; 46
 4e4:	0e 94 9a 01 	call	0x334	; 0x334 <_Z7Forwardhh>
 4e8:	04 c0       	rjmp	.+8      	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
					 else Forward(255,255);
 4ea:	6f ef       	ldi	r22, 0xFF	; 255
 4ec:	8f ef       	ldi	r24, 0xFF	; 255
 4ee:	0e 94 9a 01 	call	0x334	; 0x334 <_Z7Forwardhh>
					 timer = 1;
 4f2:	e0 92 10 01 	sts	0x0110, r14	; 0x800110 <timer>
 4f6:	61 cf       	rjmp	.-318    	; 0x3ba <main+0x44>
				}
				else{
					 if((Line_R1 - Line_L1) > 14) Forward(255,(210+(45*(Line_L1/Line_R1))));
 4f8:	29 2f       	mov	r18, r25
 4fa:	30 e0       	ldi	r19, 0x00	; 0
 4fc:	26 1b       	sub	r18, r22
 4fe:	31 09       	sbc	r19, r1
 500:	2f 30       	cpi	r18, 0x0F	; 15
 502:	31 05       	cpc	r19, r1
 504:	64 f0       	brlt	.+24     	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
 506:	86 2f       	mov	r24, r22
 508:	69 2f       	mov	r22, r25
 50a:	0e 94 31 03 	call	0x662	; 0x662 <__udivmodqi4>
 50e:	8d 9d       	mul	r24, r13
 510:	60 2d       	mov	r22, r0
 512:	11 24       	eor	r1, r1
 514:	6e 52       	subi	r22, 0x2E	; 46
 516:	8f ef       	ldi	r24, 0xFF	; 255
 518:	0e 94 9a 01 	call	0x334	; 0x334 <_Z7Forwardhh>
 51c:	04 c0       	rjmp	.+8      	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
					 else Forward(255,255);
 51e:	6f ef       	ldi	r22, 0xFF	; 255
 520:	8f ef       	ldi	r24, 0xFF	; 255
 522:	0e 94 9a 01 	call	0x334	; 0x334 <_Z7Forwardhh>
					 timer = 1;
 526:	e0 92 10 01 	sts	0x0110, r14	; 0x800110 <timer>
 52a:	47 cf       	rjmp	.-370    	; 0x3ba <main+0x44>
				}
			}
			else{
				if(linecounter == 2){
 52c:	82 30       	cpi	r24, 0x02	; 2
 52e:	81 f4       	brne	.+32     	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
					//if(Line_all_digit == 231) Forward(255,255);
					//else if(Line_all_digit > 231 && Line_all_digit < 252) Forward(255, 127);
					//else if(Line_all_digit < 231 && Line_all_digit > 127) Forward(127,255);
					//else 
					if(Line_all_digit < 128) Forward(160,255);
 530:	22 23       	and	r18, r18
 532:	2c f0       	brlt	.+10     	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
 534:	6f ef       	ldi	r22, 0xFF	; 255
 536:	80 ea       	ldi	r24, 0xA0	; 160
 538:	0e 94 9a 01 	call	0x334	; 0x334 <_Z7Forwardhh>
 53c:	06 c0       	rjmp	.+12     	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
					else if(Line_all_digit > 251) Forward(255,160);
 53e:	2c 3f       	cpi	r18, 0xFC	; 252
 540:	20 f0       	brcs	.+8      	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
 542:	60 ea       	ldi	r22, 0xA0	; 160
 544:	8f ef       	ldi	r24, 0xFF	; 255
 546:	0e 94 9a 01 	call	0x334	; 0x334 <_Z7Forwardhh>
					timer = 1;
 54a:	e0 92 10 01 	sts	0x0110, r14	; 0x800110 <timer>
 54e:	35 cf       	rjmp	.-406    	; 0x3ba <main+0x44>
				}
				else if(linecounter == 1){
 550:	81 30       	cpi	r24, 0x01	; 1
 552:	79 f4       	brne	.+30     	; 0x572 <__LOCK_REGION_LENGTH__+0x172>
					if(Line_all_digit == 254) Forward(255,155);
 554:	2e 3f       	cpi	r18, 0xFE	; 254
 556:	29 f4       	brne	.+10     	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
 558:	6b e9       	ldi	r22, 0x9B	; 155
 55a:	8f ef       	ldi	r24, 0xFF	; 255
 55c:	0e 94 9a 01 	call	0x334	; 0x334 <_Z7Forwardhh>
 560:	2c cf       	rjmp	.-424    	; 0x3ba <main+0x44>
					else if(Line_all_digit == 127) Forward(155,255);
 562:	2f 37       	cpi	r18, 0x7F	; 127
 564:	09 f0       	breq	.+2      	; 0x568 <__LOCK_REGION_LENGTH__+0x168>
 566:	29 cf       	rjmp	.-430    	; 0x3ba <main+0x44>
 568:	6f ef       	ldi	r22, 0xFF	; 255
 56a:	8b e9       	ldi	r24, 0x9B	; 155
 56c:	0e 94 9a 01 	call	0x334	; 0x334 <_Z7Forwardhh>
 570:	24 cf       	rjmp	.-440    	; 0x3ba <main+0x44>
				}
				else if(linecounter == 3){
 572:	83 30       	cpi	r24, 0x03	; 3
 574:	61 f5       	brne	.+88     	; 0x5ce <__LOCK_REGION_LENGTH__+0x1ce>
					if(Line_all_digit == 199) Forward(245,255);
 576:	27 3c       	cpi	r18, 0xC7	; 199
 578:	29 f4       	brne	.+10     	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
 57a:	6f ef       	ldi	r22, 0xFF	; 255
 57c:	85 ef       	ldi	r24, 0xF5	; 245
 57e:	0e 94 9a 01 	call	0x334	; 0x334 <_Z7Forwardhh>
 582:	22 c0       	rjmp	.+68     	; 0x5c8 <__LOCK_REGION_LENGTH__+0x1c8>
					else if(Line_all_digit == 227) Forward(255,245);
 584:	23 3e       	cpi	r18, 0xE3	; 227
 586:	29 f4       	brne	.+10     	; 0x592 <__LOCK_REGION_LENGTH__+0x192>
 588:	65 ef       	ldi	r22, 0xF5	; 245
 58a:	8f ef       	ldi	r24, 0xFF	; 255
 58c:	0e 94 9a 01 	call	0x334	; 0x334 <_Z7Forwardhh>
 590:	1b c0       	rjmp	.+54     	; 0x5c8 <__LOCK_REGION_LENGTH__+0x1c8>
					else if(Line_all_digit == 241) Forward(255, 230);
 592:	21 3f       	cpi	r18, 0xF1	; 241
 594:	29 f4       	brne	.+10     	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
 596:	66 ee       	ldi	r22, 0xE6	; 230
 598:	8f ef       	ldi	r24, 0xFF	; 255
 59a:	0e 94 9a 01 	call	0x334	; 0x334 <_Z7Forwardhh>
 59e:	14 c0       	rjmp	.+40     	; 0x5c8 <__LOCK_REGION_LENGTH__+0x1c8>
					else if(Line_all_digit == 143) Forward(230,255);
 5a0:	2f 38       	cpi	r18, 0x8F	; 143
 5a2:	29 f4       	brne	.+10     	; 0x5ae <__LOCK_REGION_LENGTH__+0x1ae>
 5a4:	6f ef       	ldi	r22, 0xFF	; 255
 5a6:	86 ee       	ldi	r24, 0xE6	; 230
 5a8:	0e 94 9a 01 	call	0x334	; 0x334 <_Z7Forwardhh>
 5ac:	0d c0       	rjmp	.+26     	; 0x5c8 <__LOCK_REGION_LENGTH__+0x1c8>
					else if(Line_all_digit == 31) Forward(210,255);
 5ae:	2f 31       	cpi	r18, 0x1F	; 31
 5b0:	29 f4       	brne	.+10     	; 0x5bc <__LOCK_REGION_LENGTH__+0x1bc>
 5b2:	6f ef       	ldi	r22, 0xFF	; 255
 5b4:	82 ed       	ldi	r24, 0xD2	; 210
 5b6:	0e 94 9a 01 	call	0x334	; 0x334 <_Z7Forwardhh>
 5ba:	06 c0       	rjmp	.+12     	; 0x5c8 <__LOCK_REGION_LENGTH__+0x1c8>
					else if(Line_all_digit == 248) Forward(255,210);
 5bc:	28 3f       	cpi	r18, 0xF8	; 248
 5be:	21 f4       	brne	.+8      	; 0x5c8 <__LOCK_REGION_LENGTH__+0x1c8>
 5c0:	62 ed       	ldi	r22, 0xD2	; 210
 5c2:	8f ef       	ldi	r24, 0xFF	; 255
 5c4:	0e 94 9a 01 	call	0x334	; 0x334 <_Z7Forwardhh>
					timer = 1;
 5c8:	e0 92 10 01 	sts	0x0110, r14	; 0x800110 <timer>
 5cc:	f6 ce       	rjmp	.-532    	; 0x3ba <main+0x44>
				}
				else if(linecounter == 4){
 5ce:	84 30       	cpi	r24, 0x04	; 4
 5d0:	29 f5       	brne	.+74     	; 0x61c <__LOCK_REGION_LENGTH__+0x21c>
					if(Line_all_digit == 195) Forward(255,255);
 5d2:	23 3c       	cpi	r18, 0xC3	; 195
 5d4:	29 f4       	brne	.+10     	; 0x5e0 <__LOCK_REGION_LENGTH__+0x1e0>
 5d6:	6f ef       	ldi	r22, 0xFF	; 255
 5d8:	8f ef       	ldi	r24, 0xFF	; 255
 5da:	0e 94 9a 01 	call	0x334	; 0x334 <_Z7Forwardhh>
 5de:	1b c0       	rjmp	.+54     	; 0x616 <__LOCK_REGION_LENGTH__+0x216>
					else if(Line_all_digit == 135) Forward(230,255);
 5e0:	27 38       	cpi	r18, 0x87	; 135
 5e2:	29 f4       	brne	.+10     	; 0x5ee <__LOCK_REGION_LENGTH__+0x1ee>
 5e4:	6f ef       	ldi	r22, 0xFF	; 255
 5e6:	86 ee       	ldi	r24, 0xE6	; 230
 5e8:	0e 94 9a 01 	call	0x334	; 0x334 <_Z7Forwardhh>
 5ec:	14 c0       	rjmp	.+40     	; 0x616 <__LOCK_REGION_LENGTH__+0x216>
					else if(Line_all_digit == 225) Forward(255,230);
 5ee:	21 3e       	cpi	r18, 0xE1	; 225
 5f0:	29 f4       	brne	.+10     	; 0x5fc <__LOCK_REGION_LENGTH__+0x1fc>
 5f2:	66 ee       	ldi	r22, 0xE6	; 230
 5f4:	8f ef       	ldi	r24, 0xFF	; 255
 5f6:	0e 94 9a 01 	call	0x334	; 0x334 <_Z7Forwardhh>
 5fa:	0d c0       	rjmp	.+26     	; 0x616 <__LOCK_REGION_LENGTH__+0x216>
					else if(Line_all_digit == 15) Forward(215,255);
 5fc:	2f 30       	cpi	r18, 0x0F	; 15
 5fe:	29 f4       	brne	.+10     	; 0x60a <__LOCK_REGION_LENGTH__+0x20a>
 600:	6f ef       	ldi	r22, 0xFF	; 255
 602:	87 ed       	ldi	r24, 0xD7	; 215
 604:	0e 94 9a 01 	call	0x334	; 0x334 <_Z7Forwardhh>
 608:	06 c0       	rjmp	.+12     	; 0x616 <__LOCK_REGION_LENGTH__+0x216>
					else if(Line_all_digit == 240) Forward(255,215);
 60a:	20 3f       	cpi	r18, 0xF0	; 240
 60c:	21 f4       	brne	.+8      	; 0x616 <__LOCK_REGION_LENGTH__+0x216>
 60e:	67 ed       	ldi	r22, 0xD7	; 215
 610:	8f ef       	ldi	r24, 0xFF	; 255
 612:	0e 94 9a 01 	call	0x334	; 0x334 <_Z7Forwardhh>
					timer = 1;
 616:	e0 92 10 01 	sts	0x0110, r14	; 0x800110 <timer>
 61a:	cf ce       	rjmp	.-610    	; 0x3ba <main+0x44>
				}
				else if(linecounter == 0 && timer != 0 && all_black == false){							//   || (linecounter ==1 && Line_all_digit < 252 && Line_all_digit > 222)
 61c:	81 11       	cpse	r24, r1
 61e:	1e c0       	rjmp	.+60     	; 0x65c <__LOCK_REGION_LENGTH__+0x25c>
 620:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <timer>
 624:	88 23       	and	r24, r24
 626:	89 f0       	breq	.+34     	; 0x64a <__LOCK_REGION_LENGTH__+0x24a>
 628:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <all_black>
 62c:	91 11       	cpse	r25, r1
 62e:	11 c0       	rjmp	.+34     	; 0x652 <__LOCK_REGION_LENGTH__+0x252>
					if(timer > 0 && timer < 35){
 630:	81 50       	subi	r24, 0x01	; 1
 632:	82 32       	cpi	r24, 0x22	; 34
 634:	30 f4       	brcc	.+12     	; 0x642 <__LOCK_REGION_LENGTH__+0x242>
						Forward(255,255);
 636:	6f ef       	ldi	r22, 0xFF	; 255
 638:	8f ef       	ldi	r24, 0xFF	; 255
 63a:	0e 94 9a 01 	call	0x334	; 0x334 <_Z7Forwardhh>
						LED_ON;
 63e:	2d 9a       	sbi	0x05, 5	; 5
 640:	bc ce       	rjmp	.-648    	; 0x3ba <main+0x44>
					}
					else {
						LED_OFF;
 642:	2d 98       	cbi	0x05, 5	; 5
						Stop();
 644:	0e 94 9f 01 	call	0x33e	; 0x33e <_Z4Stopv>
 648:	b8 ce       	rjmp	.-656    	; 0x3ba <main+0x44>
					}
				}
				else if(linecounter == 0 && all_black == true){
 64a:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <all_black>
 64e:	88 23       	and	r24, r24
 650:	29 f0       	breq	.+10     	; 0x65c <__LOCK_REGION_LENGTH__+0x25c>
					cli(); //Clear all interrupts
 652:	f8 94       	cli
					//turn around
					all_black = false;
 654:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <all_black>
					sei(); //Enable all interrupts
 658:	78 94       	sei
 65a:	af ce       	rjmp	.-674    	; 0x3ba <main+0x44>
				}
				else Stop();
 65c:	0e 94 9f 01 	call	0x33e	; 0x33e <_Z4Stopv>
 660:	ac ce       	rjmp	.-680    	; 0x3ba <main+0x44>

00000662 <__udivmodqi4>:
 662:	99 1b       	sub	r25, r25
 664:	79 e0       	ldi	r23, 0x09	; 9
 666:	04 c0       	rjmp	.+8      	; 0x670 <__udivmodqi4_ep>

00000668 <__udivmodqi4_loop>:
 668:	99 1f       	adc	r25, r25
 66a:	96 17       	cp	r25, r22
 66c:	08 f0       	brcs	.+2      	; 0x670 <__udivmodqi4_ep>
 66e:	96 1b       	sub	r25, r22

00000670 <__udivmodqi4_ep>:
 670:	88 1f       	adc	r24, r24
 672:	7a 95       	dec	r23
 674:	c9 f7       	brne	.-14     	; 0x668 <__udivmodqi4_loop>
 676:	80 95       	com	r24
 678:	08 95       	ret

0000067a <_exit>:
 67a:	f8 94       	cli

0000067c <__stop_program>:
 67c:	ff cf       	rjmp	.-2      	; 0x67c <__stop_program>
